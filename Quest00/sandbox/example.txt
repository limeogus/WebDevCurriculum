# Quest 00. 형상관리 시스템

## Introduction
* git은 2021년 현재 개발 생태계에서 가장 각광받고 있는 버전 관리 시스템입니다. 이번 퀘스트를 통해 git의 기초적인 사용법을 알아볼 예정입니다.

## Topics
* git
  * `git clone`, `git add`, `git commit`, `git push`, `git pull`, `git branch`, `git stash` 명령
  * `.git` 폴더
* GitHub

## Resources
* [Resources to learn Git](https://try.github.io)
* [Learn Git Branching](https://learngitbranching.js.org/?locale=ko)
* [Inside Git: .Git directory](https://githowto.com/git_internals_git_directory)

## Checklist
* 형상관리 시스템은 왜 나오게 되었을까요?
 ㆍ 변경점 관리 : 어떤 내용을 누가 작성해서 어느 시점에 들어갔는지 확인할 수 있게 해준다
 ㆍ 버전 관리 : 특정 시점 꼬리표(Tag)를 달아 버전을 표시해주고, 브랜치(Branch) 등으로 여러 버전을 개발할 수 있게 해준다
 ㆍ 백업&복구 : 무언가가 잘못되었을 때 다시 특정 시점으로 돌아가게 해주고, 사고로 내용이 날아간 경우에도 복구할 수 있게 해준다.
 ㆍ 협업 : 같이 일하는 사람들에게 수정사항을 쉽게 공유
  
* git은 어떤 형상관리 시스템이고 어떤 특징을 가지고 있을까요? 분산형 형상관리 시스템이란 무엇일까요?
 ㆍ매우 빠른 속도와 분산형 저장소 지원이 특징이다
 ㆍ분산 버전 관리(DVCS) : 이 시스템은 각 개발자가 중앙 서버에 접속하지 않은 상태에서도 코드 작업을 할 수 있는 것이 특징이다.
  * git은 어떻게 개발되게 되었을까요? git이 분산형 시스템을 채택한 이유는 무엇일까요?
   ㆍ오픈소스계의 영원한 아이돌 리누스 토르발스는 리눅스 커널을 관리하는 기존 툴이 엉망인 것에 너무 빡친 바람에 Git이라는 소스관리 툴을 만든다. 
     리누스는 하도 빡친 나머지, 단 2주만에 완성하는 기염을 토했다.
* git과 GitHub은 어떻게 다를까요?
   ㆍgit : 로컬에서 버전 관리 시스템을 운영하는 방식
   ㆍgitHub : 저장소를 깃허브에서 제공해주는 클라우드 서버를 이용한 방식
* git의 clone/add/commit/push/pull/branch/stash 명령은 무엇이며 어떨 때 이용하나요? 그리고 어떻게 사용하나요?
  ㆍclone : 다른 프로젝트를 참여하거나 Git 저장소를 복사하고 싶을 떄 git clone명령을 사용한다.
    - 사용법 : git clone https://github.com/libgit2/libgit2
      이 명령은 'libgit2'라는 디렉토리를 만들고 그 안에 '.git 디렉토리를 만든다.
      그리고 저장소의 데이터를 모두 가져와서 자동으로 가장 최신 버전을 Checkout해 놓는다.
      libgit2 디렉토리로 이동하면 Checkout으로 생성한 파일을 볼 수 있고 당장 하고자 하는 일을 시작할 수 있다.
  ㆍadd : 수정하고 저장소에 저장하기 (※ git status : 파일의 상태 확인하기)
    - 사용법 : git add README
      1.git status 명령을 다시 실행하면 README 파일이 Tracked 상태이면서 커밋에 추가될 Staged 상태라는 것을 확인 할 수 있다.
      2.Modified 상태의 파일을 Stage 한다
  ㆍcommit
    - 사용법 : git commit
  ㆍpush
    - 사용법 : git push origin master
  ㆍbranch
    - 사용법 : git branch -f HEAD
  ㆍstash 
    - 사용법 : 

* git의 Object, Commit, Head, Branch, Tag는 어떤 개념일까요? git 시스템은 프로젝트의 히스토리를 어떻게 저장할까요?
* 리모트 git 저장소에 원하지 않는 파일이 올라갔을 때 이를 되돌리려면 어떻게 해야 할까요?


## Quest
* GitHub에 가입한 뒤, [이 커리큘럼의 GitHub 저장소](https://github.com/KnowRe-Dev/WebDevCurriculum)의 우상단의 Fork 버튼을 눌러 자신의 저장소에 복사해 둡니다.
* Windows의 경우 같이 설치된 git shell을, MacOSX의 경우 터미널을 실행시켜 커맨드라인에 들어간 뒤, 명령어를 이용하여 복사한 저장소를 clone합니다.
  * 앞으로의 git 작업은 되도록 커맨드라인을 통해 하는 것을 권장합니다.
* 이 문서가 있는 폴더 바로 밑에 있는 sandbox 폴더에 파일을 추가한 후 커밋해 보기도 하고, 파일을 삭제해 보기도 하고, 수정해 보기도 하면서 각각의 단계에서 커밋했을 때 어떤 것들이 저장되는지를 확인합니다.
* `clone`/`add`/`commit`/`push`/`pull`/`branch`/`stash` 명령을 충분히 익혔다고 생각되면, 자신의 저장소에 이력을 push합니다.

## Advanced
* Mercurial은 어떤 형상관리 시스템일까요? 어떤 장점이 있을까요?
* 실리콘밸리의 테크 대기업들은 어떤 형상관리 시스템을 쓰고 있을까요?



